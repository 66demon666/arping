program ArpPing;

{$APPTYPE CONSOLE}
{$R *.res}

uses
  System.SysUtils,
  WinSock2,
  pcap in 'pcap.pas',
  Windows,
  System.Classes,
  DebugUtils in 'DebugUtils.pas',
  packet in 'packet.pas',
  Utils in 'Utils.pas',
  ARPTimerThread in 'ARPTimerThread.pas';

const
  IF_ID = '\Device\NPF_{077C8EF5-CB84-4C34-9C2A-66006D41D835}';
  IF_ID_2 = '\Device\NPF_{9C22769D-724A-4B92-814A-605A36AAF2CC}';

var
  alldevs, d: TPcap_if;
  errbuf: TPcapErrbuf;
  i: Integer;
  selected_interface: Integer;
  adhandle: PPcap_t;
  arp_ethernet: TetherHeader;
  packet_buffer: array of byte;
  fp: Tbpf_program;
  filter: AnsiString;
  arp_payload: TArpPacket;
  timer: ARPTimerThread.timer;

procedure packet_handler(param: PByte; pkthdr: PPcap_pkthdr;
  packet_data: PByte);
var
  etherhdr: PEtherHeader;
  ethertype: word;
  arp_payload_income: PArpPacket;
  packet_array: array of byte;
  buf: pointer;
  test: smallint;
begin
  Writeln('Packet is capture');
  SetLength(packet_array, pkthdr.len);
  Move(packet_data^, packet_array[0], Length(packet_array));
  etherhdr := PEtherHeader(@packet_array[0]);
  Writeln('Ethertype: 0x' + IntToHex(ntohs(etherhdr.ethertype), 4));
  if ntohs(etherhdr.ethertype) = ETHERTYPE_ARP then
  begin
    Writeln('ARP');
    arp_payload_income := PArpPacket(@packet_array[SizeOf(TetherHeader)]);
    if IPToString(arp_payload_income.spa) = '192.168.31.1' then
      Writeln('Response detected: ' + Utils.MACToString(arp_payload_income.sha))
    else
      Writeln('response not detected');

    // Writeln(IPToString(arp_payload_income.spa));
  end;
  if timer.isTimeout then
    pcap_breakloop(adhandle);

end;

begin
  try
    Writeln('Arping for Windows');
    Writeln('Fetching Interfaces list....');
    if (pcap_findalldevs_ex(PCAP_SRC_IF_STRING, nil, @alldevs, @errbuf) = -1)
    then
    begin
      Writeln('Error fetching interfaces. Errbuf: ' + errbuf);
      readln;
      exit();
    end
    else
    begin
      d := alldevs;
      i := 1; // Инициализация счетчика
      while Assigned(d) do // Проверяем, что d не nil
      begin
        Writeln(Format('%d. %s (%s)', [i, d.description, d.name]));

        // Обработка списка адресов
        addr := d.addresses;
        while Assigned(addr) do // Проверяем, что addr не nil
        begin
          // Преобразуем IP-адрес в строку
          ipStr := IntToIp(addr.addr.sin_addr.S_addr);
          Writeln(ipStr);

          // Переходим к следующему адресу
          addr := addr.next;
        end;

        // Переходим к следующему устройству
        d := d.next;
        Inc(i); // Увеличиваем счетчик устройств
      end;
      Writeln('Listing finished');
      Writeln('Trying open interface');
      adhandle := pcap_open(IF_ID, 655536, PCAP_OPENFLAG_PROMISCUOUS, 1000,
        nil, @errbuf);
      if (adhandle = nil) then
      begin
        Writeln('Adapter open promiscious mode error:' + errbuf);
        readln;
        exit;
      end
      else
      begin
        Writeln('Adapter opened on promiscious mode!');
        with arp_ethernet do
        begin
          destination[0] := $FF;
          destination[1] := $FF;
          destination[2] := $FF;
          destination[3] := $FF;
          destination[4] := $FF;
          destination[5] := $FF;
          source[0] := $50;
          source[1] := $E5;
          source[2] := $49;
          source[3] := $DE;
          source[4] := $68;
          source[5] := $89;
          ethertype := htons(ETHERTYPE_ARP);
        end;
        with arp_payload do
        begin
          htype := htons(1);
          ptype := htons(2048);
          hlen := 6;
          plen := 4;
          oper := htons(1);
          sha[0] := $50;
          sha[1] := $E5;
          sha[2] := $49;
          sha[3] := $DE;
          sha[4] := $68;
          sha[5] := $89;
          spa[0] := $C0;
          spa[1] := $A8;
          spa[2] := $1F;
          spa[3] := $A;
          tha[0] := $FF;
          tha[1] := $FF;
          tha[2] := $FF;
          tha[3] := $FF;
          tha[4] := $FF;
          tha[5] := $FF;
          tpa[0] := $C0;
          tpa[1] := $A8;
          tpa[2] := $1F;
          tpa[3] := $1;
        end;
        SetLength(packet_buffer, SizeOf(arp_ethernet) + SizeOf(arp_payload));
        Move(arp_ethernet, packet_buffer[0], SizeOf(arp_ethernet));
        Move(arp_payload, packet_buffer[SizeOf(arp_ethernet)],
          SizeOf(arp_payload));

        filter := 'arp[6:2] = 2';
        Writeln('Filter compilation: ' + IntToStr(pcap_compile(adhandle, @fp,
          PAnsiChar(filter), 1, $FFFFFF00)));
        // Writeln('Set filter: ' + IntToStr(pcap_setfilter(adhandle, @fp)));
        // timer := ARPTimerThread.timer.Create(1000, adhandle);
        // timer.Start;
        // pcap_loop(adhandle, 0, packet_handler, nil);
        // for i := 0 to 2 do
        // begin
        // timer := nil;
        // Writeln('sending request');
        // pcap_sendpacket(adhandle, @packet_buffer[0], Length(packet_buffer));
        // timer := ARPTimerThread.timer.Create(5000, adhandle);
        // pcap_loop(adhandle, 0, packet_handler, nil);
        // end;
        // Writeln('finish');
        // pcap_sendpacket(adhandle, @packet_buffer[0], Length(packet_buffer));
        // while true do
        // begin
        // pcap_sendpacket(adhandle, @packet_buffer[0], Length(packet_buffer));
        // sleep(1000);
        // end;

        readln;
      end;
    end;

    readln;
  except
    on E: Exception do
    begin
      Writeln(E.ClassName, ': ', E.Message);
      readln;
    end;
  end;

end.
